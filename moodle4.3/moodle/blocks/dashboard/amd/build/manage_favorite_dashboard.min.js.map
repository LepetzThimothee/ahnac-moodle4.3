{"version":3,"file":"manage_favorite_dashboard.min.js","sources":["../src/manage_favorite_dashboard.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module for the dashboard block.\n *\n * @module block_dashboard/manage_favorite_dashboard\n * @copyright   2024 Lepetz Thimoth√©e <lepetz.timo@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport * as Str from 'core/str';\nimport * as Notification from 'core/notification';\nimport * as Ajax from 'core/ajax';\n\n/**\n * Update dashboard text.\n *\n * @param {String} text Text to update.\n * @param {String} head Head to update.\n */\nconst updateDashboardText = (text, head) => {\n    const nbMyCoursesContent = document.getElementById(\"nb-my-courses\").textContent.trim();\n    const nbMyTrainingCoursesContent = document.getElementById(\"nb-my-training-courses\").textContent.trim();\n    const nbMyListContent = document.getElementById(\"nb-my-list\").textContent.trim();\n\n    $('#dashboard-text').text(text);\n    $('#t-head-text').text(head);\n    $('#dashboard-container').show();\n\n    const $tElements = {\n        default: $('#t-head-default, #t-body-default'),\n        myCourses: $('#t-head-my-courses, #t-body-my-courses'),\n        myTrainingCourses: $('#t-head-my-training-courses, #t-body-my-training-courses'),\n        myList: $('#t-body-my-list')\n    };\n\n    if ($('#my-courses .active').length > 0 && nbMyCoursesContent > 0) {\n        toggleElementsVisibility($tElements, \"myCourses\");\n    } else if ($('#my-training-courses .active').length > 0 && nbMyTrainingCoursesContent > 0) {\n        toggleElementsVisibility($tElements, \"myTrainingCourses\");\n    } else if ($('#my-list .active').length > 0 && nbMyListContent > 0) {\n        toggleElementsVisibility($tElements, \"myList\");\n    } else {\n        toggleElementsVisibility($tElements, \"default\");\n    }\n};\n\n/**\n * Toggle visibility of elements.\n *\n * @param {Object} $elements Object containing jQuery elements.\n * @param {String} target Target element key.\n */\nconst toggleElementsVisibility = ($elements, target) => {\n    Object.keys($elements).forEach(key => {\n        if (key === target) {\n            if (key === 'myList') {\n                $('#t-head-default').show();\n            }\n            $elements[key].show();\n        } else {\n            $elements[key].hide();\n        }\n    });\n};\n\n/**\n * Set the favourite state on a list of courses.\n *\n * @param {Object} args Arguments send to the webservice.\n * @return {Promise} Resolve with warnings.\n */\nconst setFavouriteCourses = args => {\n    const request = {\n        methodname: 'core_course_set_favourite_courses',\n        args: args\n    };\n    return Ajax.call([request])[0];\n};\n\n/**\n * Set the courses favourite status.\n *\n * @param {Number} courseId Course id to favourite.\n * @param {boolean} status New favourite status.\n * @return {Promise} Repository promise.\n */\nconst setCourseFavouriteState = (courseId, status) => {\n    return setFavouriteCourses({\n        courses: [\n            {\n                'id': courseId,\n                'favourite': status\n            }\n        ]\n    }).then(result => {\n        return result.warnings.length === 0;\n    }).catch(Notification.exception);\n};\n\n/**\n * Retrieve strings for dashboard.\n *\n * @return {Promise<Array>} Array of strings.\n */\nconst getStrings = async () => {\n    const stringKeys = [\n        { key: 'no_course_text', component: 'block_dashboard' },\n        { key: 'no_session_text', component: 'block_dashboard' },\n        { key: 'no_training_course_text', component: 'block_dashboard' },\n        { key: 'nothing_in_my_list_text', component: 'block_dashboard' },\n        { key: 'your_course', component: 'block_dashboard' },\n        { key: 'your_upcoming_sessions', component: 'block_dashboard' },\n        { key: 'your_training_courses', component: 'block_dashboard' },\n        { key: 'my_list', component: 'block_dashboard' },\n        { key: 'moodle_url', component: 'block_dashboard' }\n    ];\n    return Str.get_strings(stringKeys).catch(error => {\n        Notification.exception(error);\n        return [];\n    });\n};\n\n/**\n * Handle click event on dashboard buttons.\n *\n * @param {Event} event Click event object.\n */\nconst handleDashboardButtonClick = (event) => {\n    $('.dashboard-button').removeClass('active');\n    $(event.currentTarget).addClass('active');\n};\n\n/**\n * Handle click event on dashboard item.\n *\n * @param {Array} strings Array of strings.\n * @param {number} index1 Index of the first string.\n * @param {number} index2 Index of the second string.\n */\nconst handleDashboardItemClick = (strings, index1, index2) => {\n    updateDashboardText(strings[index1], strings[index2]);\n};\n\n/**\n * Update the display after removing a course from favorites.\n * @param {HTMLElement} removedCourseElement The HTML element of the removed course.\n */\nconst updateDisplayAfterRemoveFavorite = (removedCourseElement) => {\n    updateNbMyListDisplay('remove');\n    removedCourseElement.remove(); // Remove the course from the HTML\n};\n\n/**\n * Update the display of the number of items in \"My List\".\n * @param {string} action Action to perform: 'add' to add 1, 'remove' to remove 1.\n */\nconst updateNbMyListDisplay = (action) => {\n    let nbMyListContent = parseInt(document.getElementById(\"nb-my-list\").textContent.trim(), 10); // Parse to integer\n    nbMyListContent += (action === 'add') ? 1 : -1;\n    $('#t-body-default').toggle(nbMyListContent === 0);\n    $('#t-body-my-list').toggle(nbMyListContent !== 0);\n    document.getElementById(\"nb-my-list\").textContent = nbMyListContent.toString().padStart(3, '0');\n};\n\n/**\n * Handle click event on remove favorite button.\n *\n * @param {Event} event Click event object.\n */\nconst handleRemoveFavoriteButtonClick = (event) => {\n    event.preventDefault();\n    const courseId = event.currentTarget.dataset.courseId;\n    const removedCourseElement = event.currentTarget.closest('.list-group-item'); // Get the HTML element of the removed course\n    setCourseFavouriteState(parseInt(courseId), false).then(success => {\n        if (success) {\n            updateDisplayAfterRemoveFavorite(removedCourseElement);\n            const removeFavoritEvent = new CustomEvent('removeFavoriteCourse', {\n                detail: {\n                    courseId: parseInt(courseId)\n                }\n            });\n            document.dispatchEvent(removeFavoritEvent);\n        } else {\n            Notification.alert('Failed to remove course from favorites.');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Update favorites by either removing the course from the favorite list or fetching updated HTML via AJAX.\n *\n * If the course has a remove button, it removes the course from the list.\n * Otherwise, it sends an AJAX request to fetch updated HTML code for the course.\n *\n * @param {number} courseId - The ID of the course to update.\n * @param {string} moodleUrl - The base URL of the Moodle site.\n */\nconst updateFavorites = (courseId, moodleUrl) => {\n    const removeButton = document.querySelector('.btn-remove-fav[data-course-id=\"' + courseId + '\"]');\n    if (removeButton) {\n        const removedCourseElement = removeButton.closest('.list-group-item');\n        updateDisplayAfterRemoveFavorite(removedCourseElement);\n    } else {\n        updateNbMyListDisplay('add');\n        const element = document.querySelector('.favorite-icon[data-course-id=\"' + courseId + '\"]');\n        const hasCategory = document.getElementById('accordionCategory' + element.dataset.courseCategoryId) !== null;\n        $.ajax({\n            url: moodleUrl + \"blocks/dashboard/favorite_endpoint.php\",\n            type: 'GET',\n            data: {\n                moodleurl: moodleUrl,\n                courseid: courseId,\n                coursefullname: element.dataset.courseFullname,\n                categoryid: element.dataset.courseCategoryId,\n                categoryname: element.dataset.courseCategoryName,\n                hascategory: hasCategory\n            },\n            success: function(data) {\n                if (hasCategory) {\n                    const container = document.getElementById('collapseCategory' + element.dataset.courseCategoryId);\n                    const ulElement = container.querySelector('ul.list-group');\n                    ulElement.innerHTML += data;\n                } else {\n                    document.getElementById('t-body-my-list').innerHTML += data;\n                }\n            },\n            error: function(xhr, status, error) {\n                Notification.alert(error);\n            }\n        });\n    }\n};\n\n/**\n * Handle the 'favoriteCourseChanged' event.\n *\n * @param {Event} event - The favoriteCourseChanged event object.\n * @param {string} moodleUrl - The base URL of the Moodle site.\n */\nconst handleFavoriteCourseChanged = (event, moodleUrl) => {\n    const data = event.detail;\n    updateFavorites(data.courseId, moodleUrl);\n};\n\n/**\n * Toggle the chevron icon class.\n *\n * @param {Event} event Click event object.\n */\nconst toggleChevronIcon = (event) => {\n    $(event.currentTarget).find('i').toggleClass('fa-chevron-down fa-chevron-up');\n};\n\n/**\n * Initialize dashboard functionality.\n *\n * @method init\n */\nexport const init = async () => {\n    document.addEventListener('favoriteCourseChanged', (event) => handleFavoriteCourseChanged(event, strings[8]));\n    $('.dashboard-button').on('click', (event) => handleDashboardButtonClick(event));\n    const strings = await getStrings();\n    $('#my-courses').on('click', () => handleDashboardItemClick(strings, 0, 4));\n    $('#my-sessions').on('click', () => handleDashboardItemClick(strings, 1, 5));\n    $('#my-training-courses').on('click', () => handleDashboardItemClick(strings, 2, 6));\n    $('#my-list').on('click', () => handleDashboardItemClick(strings, 3, 7));\n    $('.accordion button[data-toggle=\"collapse\"].text-left').on('click', (event) => toggleChevronIcon(event));\n    $('#t-body-my-list').on('click', '.btn-remove-fav', (event) => handleRemoveFavoriteButtonClick(event));\n};"],"names":["toggleElementsVisibility","$elements","target","Object","keys","forEach","key","show","hide","setCourseFavouriteState","courseId","status","args","request","methodname","Ajax","call","setFavouriteCourses","courses","then","result","warnings","length","catch","Notification","exception","handleDashboardItemClick","strings","index1","index2","text","head","nbMyCoursesContent","document","getElementById","textContent","trim","nbMyTrainingCoursesContent","nbMyListContent","$tElements","default","myCourses","myTrainingCourses","myList","updateDashboardText","updateDisplayAfterRemoveFavorite","removedCourseElement","updateNbMyListDisplay","remove","action","parseInt","toggle","toString","padStart","handleFavoriteCourseChanged","event","moodleUrl","removeButton","querySelector","closest","element","hasCategory","dataset","courseCategoryId","ajax","url","type","data","moodleurl","courseid","coursefullname","courseFullname","categoryid","categoryname","courseCategoryName","hascategory","success","innerHTML","error","xhr","alert","updateFavorites","detail","async","addEventListener","on","removeClass","currentTarget","addClass","handleDashboardButtonClick","Str","get_strings","component","getStrings","find","toggleClass","toggleChevronIcon","preventDefault","removeFavoritEvent","CustomEvent","dispatchEvent","handleRemoveFavoriteButtonClick"],"mappings":"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"}